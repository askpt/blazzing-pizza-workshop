@page "/checkout"
@attribute [Authorize]

@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model="@OrderState.Order.DeliveryAddress" OnValidSubmit="@PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review Order</h4>
                <OrderReview Order="@OrderState.Order"/>
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress"/>
            </div>
        </div>

        <button type="submit" disabled="@_isSubmitting" class="checkout-button btn btn-warning">
            Place Order
        </button>

        <DataAnnotationsValidator/>
    </EditForm>
</div>

@code {

    bool _isSubmitting;
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
        // The server won't accept orders from unauthenticated users, so avoid
        // an error by making them log in at this point
            NavigationManager.NavigateTo("authentication/login?redirectUri=/checkout", true);
        }
    }

    async Task PlaceOrder()
    {
        try
        {
            _isSubmitting = true;
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
            _isSubmitting = false;

            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

}